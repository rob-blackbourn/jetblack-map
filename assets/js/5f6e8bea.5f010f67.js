"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2559],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(t),f=o,d=m["".concat(u,".").concat(f)]||m[f]||p[f]||a;return t?r.createElement(d,i(i({ref:n},c),{},{components:t})):r.createElement(d,i({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2425:function(e,n,t){t.d(n,{Z:function(){return i}});var r=t(7294),o=t(6010),a="tabItem__kUE";function i(e){var n=e.children,t=e.hidden,i=e.className;return r.createElement("div",{role:"tabpanel",className:(0,o.Z)(a,i),hidden:t},n)}},7986:function(e,n,t){t.d(n,{Z:function(){return f}});var r=t(7462),o=t(7294),a=t(6010),i=t(2389),l=t(2398),u=t(4345),s=t(5944),c="tabList_fbd4",p="tabItem_v5XY";function m(e){var n,t,i=e.lazy,m=e.block,f=e.defaultValue,d=e.values,b=e.groupId,v=e.className,h=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=d?d:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),g=(0,l.l)(y,(function(e,n){return e.value===n.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===f?f:null!=(n=null!=f?f:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:h[0].props.value;if(null!==k&&!y.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var C=(0,u.U)(),O=C.tabGroupChoices,j=C.setTabGroupChoices,T=(0,o.useState)(k),w=T[0],E=T[1],P=[],N=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=b){var S=O[b];null!=S&&S!==w&&y.some((function(e){return e.value===S}))&&E(S)}var R=function(e){var n=e.currentTarget,t=P.indexOf(n),r=y[t].value;r!==w&&(N(n),E(r),null!=b&&j(b,String(r)))},x=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r,o=P.indexOf(e.currentTarget)+1;t=null!=(r=P[o])?r:P[0];break;case"ArrowLeft":var a,i=P.indexOf(e.currentTarget)-1;t=null!=(a=P[i])?a:P[P.length-1]}null==(n=t)||n.focus()};return o.createElement("div",{className:(0,a.Z)("tabs-container",c)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":m},v)},y.map((function(e){var n=e.value,t=e.label,i=e.attributes;return o.createElement("li",(0,r.Z)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:function(e){return P.push(e)},onKeyDown:x,onFocus:R,onClick:R},i,{className:(0,a.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":w===n})}),null!=t?t:n)}))),i?(0,o.cloneElement)(h.filter((function(e){return e.props.value===w}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},h.map((function(e,n){return(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==w})}))))}function f(e){var n=(0,i.Z)();return o.createElement(m,(0,r.Z)({key:String(n)},e))}},8839:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return c},default:function(){return b},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return f}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=t(7986),l=t(2425),u=["components"],s={sidebar_position:11},c="GeoJSON Marker",p={unversionedId:"tutorial/geojson-marker",id:"tutorial/geojson-marker",title:"GeoJSON Marker",description:"The default marker for geojson points is a simple circle. The geojson",source:"@site/docs/tutorial/geojson-marker.md",sourceDirName:"tutorial",slug:"/tutorial/geojson-marker",permalink:"/jetblack-map/docs/tutorial/geojson-marker",draft:!1,editUrl:"https://github.com/rob-blackbourn/jetblack-map/tree/main/website/docs/tutorial/geojson-marker.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"GeoJSON Popups",permalink:"/jetblack-map/docs/tutorial/geojson-popup"},next:{title:"Components",permalink:"/jetblack-map/docs/category/components"}},m={},f=[],d={toc:f};function b(e){var n=e.components,t=(0,o.Z)(e,u);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"geojson-marker"},"GeoJSON Marker"),(0,a.kt)("p",null,"The default marker for geojson points is a simple circle. The geojson\nlayer takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"markerComponent")," prop which is React component that\ntakes a screen point and a geojson feature and returns the svg marker\nelement."),(0,a.kt)("p",null,"The following code replaces the default circle marker with a pin."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"js",label:"JS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useRef } from 'react'\n\nimport {\n  Map,\n  osmTileProvider,\n  useDrag,\n  useZoom,\n} from '@jetblack/maps'\nimport { GeoJSONLayer } from '@jetblack/map-geojson'\n\n// This is the custom marker.\nfunction PinMarker({ point }) {\n  return (\n    <g\n      style={{ pointerEvents: 'auto' }}\n      transform={`translate(${point.x - 14} ${point.y - 25}) scale(0.5 0.5)`}\n    >\n      <path\n        d=\"M52 31.5C52 36.8395 49.18 42.314 45.0107 47.6094C40.8672 52.872 35.619 57.678 31.1763 61.6922C30.7916 62.0398 30.2084 62.0398 29.8237 61.6922C25.381 57.678 20.1328 52.872 15.9893 47.6094C11.82 42.314 9 36.8395 9 31.5C9 18.5709 18.6801 9 30.5 9C42.3199 9 52 18.5709 52 31.5Z\"\n        fill=\"orange\"\n        stroke=\"white\"\n        strokeWidth=\"4\"\n      />\n      <circle cx=\"30.5\" cy=\"30.5\" r=\"8.5\" fill=\"white\" opacity={0.6} />\n    </g>\n  )\n}\n\nexport default function App() {\n  const GREENWICH_OBSERVATORY = {\n    latitude: 51.47684676353231,\n    longitude: -0.0005261695762532147,\n  }\n\n  const data = {\n    type: 'FeatureCollection',\n    features: [\n      {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-0.0005261695762532147, 51.47684676353231],\n        },\n        properties: { name: 'Greenwich Observatory' },\n      },\n      {\n        type: 'Feature',\n        geometry: {\n          type: 'MultiPoint',\n          coordinates: [\n            [2.3742684290761105, 48.86380120851702],\n            [-1.5517871865064765, 47.246730628236755],\n            [1.4460149695779017, 43.606797136829464],\n            [3.8655608722043815, 43.59577745327528],\n            [5.341636045504812, 43.30855735318184],\n            [4.839466141186111, 45.77013358229793],\n          ],\n        },\n        properties: { name: 'French Cities' },\n      },\n    ],\n  }\n\n  const ref = useRef(null)\n\n  const [zoom, setZoom] = useZoom({ ref, defaultZoom: 6 })\n  const [center, setCenter] = useDrag({\n    ref,\n    zoom,\n    defaultCenter: GREENWICH_OBSERVATORY,\n    tileSize: osmTileProvider.tileSize,\n  })\n\n  const handleRenderPopup = (feature) => {\n    if (!(feature && feature.properties)) {\n      return null\n    }\n\n    // Find the name of the feature.\n    const name = Object.entries(feature.properties)\n      .filter(([key, value]) => key === 'name')[0][1]\n\n    return (\n      <div\n        style={{\n          backgroundColor: 'black',\n          color: 'white',\n          padding: 2,\n          borderRadius: 5,\n          fontSize: '75%',\n        }}\n      >\n        {name}\n      </div>\n    )\n  }\n\n  return (\n    <Map\n      ref={ref}\n      center={center}\n      zoom={zoom}\n      tileProvider={osmTileProvider}\n      width={600}\n      height={400}\n    >\n      <GeoJSONLayer\n        data={data}\n        markerComponent={PinMarker}\n        renderPopup={handleRenderPopup}\n      />\n    </Map>\n  )\n}\n"))),(0,a.kt)(l.Z,{value:"ts",label:"TS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { useRef } from 'react'\n\nimport { Feature, FeatureCollection } from 'geojson'\n\nimport {\n  Coordinate,\n  Map,\n  MarkerComponentProps,\n  osmTileProvider,\n  useDrag,\n  useZoom,\n} from '@jetblack/maps'\nimport { GeoJSONLayer } from '@jetblack/map-geojson'\n\n// This is the custom marker.\nfunction PinMarker({ point }: MarkerComponentProps) {\n  return (\n    <g\n      style={{ pointerEvents: 'auto' }}\n      transform={`translate(${point.x - 14} ${point.y - 25}) scale(0.5 0.5)`}\n    >\n      <path\n        d=\"M52 31.5C52 36.8395 49.18 42.314 45.0107 47.6094C40.8672 52.872 35.619 57.678 31.1763 61.6922C30.7916 62.0398 30.2084 62.0398 29.8237 61.6922C25.381 57.678 20.1328 52.872 15.9893 47.6094C11.82 42.314 9 36.8395 9 31.5C9 18.5709 18.6801 9 30.5 9C42.3199 9 52 18.5709 52 31.5Z\"\n        fill=\"orange\"\n        stroke=\"white\"\n        strokeWidth=\"4\"\n      />\n      <circle cx=\"30.5\" cy=\"30.5\" r=\"8.5\" fill=\"white\" opacity={0.6} />\n    </g>\n  )\n}\n\nexport default function App() {\n  const GREENWICH_OBSERVATORY: Coordinate = {\n    latitude: 51.47684676353231,\n    longitude: -0.0005261695762532147,\n  }\n\n  const data: FeatureCollection = {\n    type: 'FeatureCollection',\n    features: [\n      {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-0.0005261695762532147, 51.47684676353231],\n        },\n        properties: { name: 'Greenwich Observatory' },\n      },\n      {\n        type: 'Feature',\n        geometry: {\n          type: 'MultiPoint',\n          coordinates: [\n            [2.3742684290761105, 48.86380120851702],\n            [-1.5517871865064765, 47.246730628236755],\n            [1.4460149695779017, 43.606797136829464],\n            [3.8655608722043815, 43.59577745327528],\n            [5.341636045504812, 43.30855735318184],\n            [4.839466141186111, 45.77013358229793],\n          ],\n        },\n        properties: { name: 'French Cities' },\n      },\n    ],\n  }\n\n  const ref = useRef<HTMLDivElement>(null)\n\n  const [zoom, setZoom] = useZoom({ ref, defaultZoom: 6 })\n  const [center, setCenter] = useDrag({\n    ref,\n    zoom,\n    defaultCenter: GREENWICH_OBSERVATORY,\n    tileSize: osmTileProvider.tileSize,\n  })\n\n  const handleRenderPopup = (feature: Feature) => {\n    if (!(feature && feature.properties)) {\n      return null\n    }\n\n    // Find the name of the feature.\n    const name = Object.entries(feature.properties)\n      .filter(([key, value]) => key === 'name')[0][1]\n\n    return (\n      <div\n        style={{\n          backgroundColor: 'black',\n          color: 'white',\n          padding: 2,\n          borderRadius: 5,\n          fontSize: '75%',\n        }}\n      >\n        {name}\n      </div>\n    )\n  }\n\n  return (\n    <Map\n      ref={ref}\n      center={center}\n      zoom={zoom}\n      tileProvider={osmTileProvider}\n      width={600}\n      height={400}\n    >\n      <GeoJSONLayer\n        data={data}\n        markerComponent={PinMarker}\n        renderPopup={handleRenderPopup}\n      />\n    </Map>\n  )\n}\n")))))}b.isMDXComponent=!0}}]);